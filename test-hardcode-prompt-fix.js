#!/usr/bin/env node

/**
 * Test Script: Verify Hardcode Prompt Fix
 * Ki·ªÉm tra xem h·ªá th·ªëng prompt ƒë√£ ƒë∆∞·ª£c fix ƒë√∫ng ch∆∞a
 */

const fs = require('fs');
const path = require('path');

console.log('üîç KI·ªÇM TRA HARDCODE PROMPT FIX');
console.log('='.repeat(50));

// Test 1: Ki·ªÉm tra gemini-config.ts
function testGeminiConfig() {
  console.log('\nüìã Test 1: Ki·ªÉm tra gemini-config.ts');
  
  const configPath = './src/lib/gemini-config.ts';
  const content = fs.readFileSync(configPath, 'utf8');
  
  // Ki·ªÉm tra IRIN_SYSTEM_INSTRUCTION ƒë√£ b·ªã x√≥a
  const hasHardcodePrompt = content.includes('IRIN_SYSTEM_INSTRUCTION');
  const hasHardcodeText = content.includes('You are iRIN, a versatile AI teacher');
  
  if (hasHardcodePrompt || hasHardcodeText) {
    console.log('‚ùå FAIL: V·∫´n c√≤n hardcode prompt trong gemini-config.ts');
    console.log('   - IRIN_SYSTEM_INSTRUCTION:', hasHardcodePrompt);
    console.log('   - Hardcode text:', hasHardcodeText);
    return false;
  }
  
  // Ki·ªÉm tra createGeminiConfig kh√¥ng c√≤n fallback hardcode
  const createConfigMatch = content.match(/systemInstruction:\s*systemInstruction\s*\|\|\s*([^,\n}]+)/);
  if (createConfigMatch && createConfigMatch[1].trim() !== 'systemInstruction') {
    console.log('‚ùå FAIL: createGeminiConfig v·∫´n c√≥ hardcode fallback');
    console.log('   Fallback:', createConfigMatch[1]);
    return false;
  }
  
  console.log('‚úÖ PASS: gemini-config.ts ƒë√£ clean');
  return true;
}

// Test 2: Ki·ªÉm tra gemini-service.ts
function testGeminiService() {
  console.log('\nüìã Test 2: Ki·ªÉm tra gemini-service.ts');
  
  const servicePath = './src/lib/gemini-service.ts';
  const content = fs.readFileSync(servicePath, 'utf8');
  
  // Ki·ªÉm tra t·∫•t c·∫£ c√°c method ƒë·ªÅu s·ª≠ d·ª•ng getCurrentSystemPrompt()
  const getCurrentSystemPromptUsage = (content.match(/getCurrentSystemPrompt\(\)/g) || []).length;
  const expectedUsage = 6; // S·ªë l·∫ßn expected s·ª≠ d·ª•ng
  
  if (getCurrentSystemPromptUsage < expectedUsage) {
    console.log(`‚ùå FAIL: Kh√¥ng ƒë·ªß getCurrentSystemPrompt() usage`);
    console.log(`   Expected: ${expectedUsage}, Found: ${getCurrentSystemPromptUsage}`);
    return false;
  }
  
  // Ki·ªÉm tra validateApiKey c√≥ systemInstruction
  const validateApiKeyMatch = content.match(/validateApiKey[\s\S]*?createGeminiConfig\(\{[\s\S]*?systemInstruction:\s*([^}]+)\}/);
  if (!validateApiKeyMatch) {
    console.log('‚ùå FAIL: validateApiKey kh√¥ng c√≥ systemInstruction');
    return false;
  }
  
  console.log('‚úÖ PASS: gemini-service.ts ƒë√£ s·ª≠ d·ª•ng dynamic prompt');
  return true;
}

// Test 3: Ki·ªÉm tra groq-service.ts consistency
function testGroqService() {
  console.log('\nüìã Test 3: Ki·ªÉm tra groq-service.ts consistency');
  
  const servicePath = './src/lib/groq-service.ts';
  const content = fs.readFileSync(servicePath, 'utf8');
  
  // Ki·ªÉm tra Groq service c≈©ng s·ª≠ d·ª•ng getCurrentSystemPrompt()
  const getCurrentSystemPromptUsage = (content.match(/getCurrentSystemPrompt\(\)/g) || []).length;
  
  if (getCurrentSystemPromptUsage === 0) {
    console.log('‚ùå FAIL: Groq service kh√¥ng s·ª≠ d·ª•ng getCurrentSystemPrompt()');
    return false;
  }
  
  // Ki·ªÉm tra kh√¥ng c√≥ hardcode prompt
  const hasHardcodePrompt = content.includes('You are iRIN') || content.includes('IRIN_SYSTEM_INSTRUCTION');
  
  if (hasHardcodePrompt) {
    console.log('‚ùå FAIL: Groq service v·∫´n c√≥ hardcode prompt');
    return false;
  }
  
  console.log('‚úÖ PASS: groq-service.ts consistent v·ªõi dynamic prompt');
  return true;
}

// Test 4: Ki·ªÉm tra prompt-storage.ts
function testPromptStorage() {
  console.log('\nüìã Test 4: Ki·ªÉm tra prompt-storage.ts');
  
  const storagePath = './src/lib/prompt-storage.ts';
  const content = fs.readFileSync(storagePath, 'utf8');
  
  // Ki·ªÉm tra c√≥ getCurrentSystemPrompt function
  const hasGetCurrentSystemPrompt = content.includes('export function getCurrentSystemPrompt()');
  
  if (!hasGetCurrentSystemPrompt) {
    console.log('‚ùå FAIL: Kh√¥ng c√≥ getCurrentSystemPrompt function');
    return false;
  }
  
  // Ki·ªÉm tra c√≥ CORE_IDENTITY_PROMPT
  const hasCoreIdentity = content.includes('CORE_IDENTITY_PROMPT');
  
  if (!hasCoreIdentity) {
    console.log('‚ùå FAIL: Kh√¥ng c√≥ CORE_IDENTITY_PROMPT');
    return false;
  }
  
  console.log('‚úÖ PASS: prompt-storage.ts ho·∫°t ƒë·ªông ƒë√∫ng');
  return true;
}

// Test 5: Ki·ªÉm tra user-prompt-generator.ts
function testUserPromptGenerator() {
  console.log('\nüìã Test 5: Ki·ªÉm tra user-prompt-generator.ts');
  
  const generatorPath = './src/lib/user-prompt-generator.ts';
  const content = fs.readFileSync(generatorPath, 'utf8');
  
  // Ki·ªÉm tra kh√¥ng s·ª≠ d·ª•ng getCurrentSystemPrompt (ƒë·ªÉ tr√°nh core injection)
  const usesGetCurrentSystemPrompt = content.includes('getCurrentSystemPrompt');
  
  if (usesGetCurrentSystemPrompt) {
    console.log('‚ùå FAIL: user-prompt-generator.ts kh√¥ng n√™n s·ª≠ d·ª•ng getCurrentSystemPrompt');
    return false;
  }
  
  // Ki·ªÉm tra s·ª≠ d·ª•ng direct GoogleGenAI client
  const usesDirectClient = content.includes('new GoogleGenAI({ apiKey })');
  
  if (!usesDirectClient) {
    console.log('‚ùå FAIL: user-prompt-generator.ts kh√¥ng s·ª≠ d·ª•ng direct client');
    return false;
  }
  
  console.log('‚úÖ PASS: user-prompt-generator.ts t√°ch bi·ªát ƒë√∫ng');
  return true;
}

// Main test runner
function runAllTests() {
  console.log('\nüöÄ B·∫ÆT ƒê·∫¶U KI·ªÇM TRA...\n');
  
  const tests = [
    { name: 'Gemini Config', fn: testGeminiConfig },
    { name: 'Gemini Service', fn: testGeminiService },
    { name: 'Groq Service', fn: testGroqService },
    { name: 'Prompt Storage', fn: testPromptStorage },
    { name: 'User Prompt Generator', fn: testUserPromptGenerator }
  ];
  
  let passed = 0;
  let failed = 0;
  
  for (const test of tests) {
    try {
      if (test.fn()) {
        passed++;
      } else {
        failed++;
      }
    } catch (error) {
      console.log(`‚ùå ERROR in ${test.name}:`, error.message);
      failed++;
    }
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('üìä K·∫æT QU·∫¢ KI·ªÇM TRA:');
  console.log(`‚úÖ Passed: ${passed}`);
  console.log(`‚ùå Failed: ${failed}`);
  
  if (failed === 0) {
    console.log('\nüéâ T·∫§T C·∫¢ TESTS ƒê·ªÄU PASS!');
    console.log('‚úÖ H·ªá th·ªëng prompt ƒë√£ ƒë∆∞·ª£c fix ho√†n to√†n');
    console.log('‚úÖ Kh√¥ng c√≤n hardcode prompt n√†o');
    console.log('‚úÖ Dynamic prompt system ho·∫°t ƒë·ªông ƒë√∫ng');
  } else {
    console.log('\n‚ö†Ô∏è  C√ì TESTS FAIL - C·∫¶N KI·ªÇM TRA L·∫†I');
  }
  
  return failed === 0;
}

// Run tests
if (require.main === module) {
  runAllTests();
}

module.exports = { runAllTests };
