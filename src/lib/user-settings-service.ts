/**
 * User Settings Service
 * X·ª≠ l√Ω c√°c thao t√°c CRUD cho user profile v√† settings
 */

import { supabase, supabaseAdmin } from '@/lib/supabase'
import type { User, UserUpdate } from '@/types/supabase'

// Types cho user settings
export interface UserProfileUpdate {
  name?: string
  avatar_icon?: string
}

export interface PasswordChangeData {
  currentPassword: string
  newPassword: string
  confirmPassword: string
}

export interface UserSettingsResult {
  success: boolean
  data?: any
  error?: string
}

export class UserSettingsService {
  /**
   * L·∫•y th√¥ng tin profile c·ªßa user
   */
  async getUserProfile(userId: string): Promise<UserSettingsResult> {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .single()

      if (error) {
        return {
          success: false,
          error: 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng'
        }
      }

      return {
        success: true,
        data
      }
    } catch (error) {
      console.error('Get user profile error:', error)
      return {
        success: false,
        error: 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng'
      }
    }
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin profile
   */
  async updateUserProfile(userId: string, updates: UserProfileUpdate): Promise<UserSettingsResult> {
    try {
      console.log('üîÑ Starting updateUserProfile:', { userId, updates })

      // Validate input
      if (!userId) {
        console.error('‚ùå Invalid user ID:', userId)
        return {
          success: false,
          error: 'ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá'
        }
      }

      // Validate updates object
      if (!updates || Object.keys(updates).length === 0) {
        console.error('‚ùå No updates provided:', updates)
        return {
          success: false,
          error: 'Kh√¥ng c√≥ th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t'
        }
      }

      // Prepare update data
      const updateData: UserUpdate = {
        ...updates,
        updated_at: new Date().toISOString()
      }

      console.log('üìù Prepared update data:', updateData)

      // Check if user exists first
      const { data: existingUser, error: getUserError } = await supabase
        .from('users')
.select('id, email, name, avatar_icon')
        .eq('id', userId)
        .single()

      if (getUserError) {
        console.error('‚ùå Failed to get existing user:', getUserError)

        // Specific error handling for missing columns
        if (getUserError.message?.includes('does not exist')) {
          return {
            success: false,
            error: `Database schema ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Vui l√≤ng ch·∫°y migration script trong Supabase SQL Editor. Chi ti·∫øt: ${getUserError.message}`
          }
        }

        return {
          success: false,
          error: `Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: ${getUserError.message}`
        }
      }

      console.log('üë§ Existing user found:', existingUser)

      // Update in database
      const { data, error } = await supabase
        .from('users')
        .update(updateData)
        .eq('id', userId)
        .select()
        .single()

      if (error) {
        console.error('‚ùå Database update error:', error)
        console.error('Error details:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        })

        // Specific error handling
        if (error.message?.includes('does not exist')) {
          return {
            success: false,
            error: `Database schema ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Vui l√≤ng ch·∫°y migration script. Chi ti·∫øt: ${error.message}`
          }
        }

        if (error.message?.includes('permission') || error.message?.includes('policy')) {
          return {
            success: false,
            error: `L·ªói ph√¢n quy·ªÅn. Vui l√≤ng ki·ªÉm tra RLS policies. Chi ti·∫øt: ${error.message}`
          }
        }

        return {
          success: false,
          error: `Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng: ${error.message}`
        }
      }

      console.log('‚úÖ Update successful:', data)

      // Also update user metadata in Supabase Auth
      if (updates.name || updates.avatar_icon) {
        const authUpdateData: any = {}
        if (updates.name) authUpdateData.name = updates.name
        if (updates.avatar_icon) authUpdateData.avatar_icon = updates.avatar_icon
        
        const { error: authError } = await supabase.auth.updateUser({
          data: authUpdateData
        })
        
        if (authError) {
          console.error('‚ö†Ô∏è Failed to update auth metadata:', authError)
          // Still return success since database update worked
        } else {
          console.log('‚úÖ Auth metadata updated successfully')
        }
      }

      return {
        success: true,
        data
      }
    } catch (error) {
      console.error('üí• Unexpected error in updateUserProfile:', error)
      return {
        success: false,
        error: `ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin: ${error instanceof Error ? error.message : 'Unknown error'}`
      }
    }
  }

  /**
   * ƒê·ªïi m·∫≠t kh·∫©u
   */
  async changePassword(passwordData: PasswordChangeData): Promise<UserSettingsResult> {
    try {
      // Validate input
      if (!passwordData.currentPassword || !passwordData.newPassword) {
        return {
          success: false,
          error: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin'
        }
      }

      if (passwordData.newPassword !== passwordData.confirmPassword) {
        return {
          success: false,
          error: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp'
        }
      }

      if (passwordData.newPassword.length < 6 || passwordData.newPassword.length > 8) {
        return {
          success: false,
          error: 'M·∫≠t kh·∫©u ph·∫£i c√≥ t·ª´ 6-8 k√Ω t·ª±'
        }
      }

      // Update password using Supabase Auth
      const { error } = await supabase.auth.updateUser({
        password: passwordData.newPassword
      })

      if (error) {
        return {
          success: false,
          error: 'Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.'
        }
      }

      // Update password_updated_at in users table
      const { data: { user } } = await supabase.auth.getUser()
      if (user) {
        await supabase
          .from('users')
          .update({ 
            password_updated_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
          .eq('id', user.id)
      }

      return {
        success: true,
        data: { message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' }
      }
    } catch (error) {
      console.error('Change password error:', error)
      return {
        success: false,
        error: 'ƒê√£ x·∫£y ra l·ªói khi ƒë·ªïi m·∫≠t kh·∫©u'
      }
    }
  }

  /**
   * C·∫≠p nh·∫≠t avatar icon
   */
  async updateAvatarIcon(userId: string, iconName: string): Promise<UserSettingsResult> {
    try {
      if (!userId || !iconName) {
        return {
          success: false,
          error: 'Th√¥ng tin kh√¥ng h·ª£p l·ªá'
        }
      }

      const { data, error } = await supabase
        .from('users')
        .update({ 
          avatar_icon: iconName,
          updated_at: new Date().toISOString()
        })
        .eq('id', userId)
        .select()
        .single()

      if (error) {
        return {
          success: false,
          error: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t avatar'
        }
      }

      return {
        success: true,
        data
      }
    } catch (error) {
      console.error('Update avatar icon error:', error)
      return {
        success: false,
        error: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t avatar'
      }
    }
  }

  /**
   * X√≥a avatar (ƒë·∫∑t v·ªÅ null)
   */
  async removeAvatar(userId: string): Promise<UserSettingsResult> {
    try {
      const { data, error } = await supabase
        .from('users')
.update({ 
          avatar_icon: null,
          updated_at: new Date().toISOString()
        })
        .eq('id', userId)
        .select()
        .single()

      if (error) {
        return {
          success: false,
          error: 'Kh√¥ng th·ªÉ x√≥a avatar'
        }
      }

      return {
        success: true,
        data
      }
    } catch (error) {
      console.error('Remove avatar error:', error)
      return {
        success: false,
        error: 'ƒê√£ x·∫£y ra l·ªói khi x√≥a avatar'
      }
    }
  }

  /**
   * L·∫•y th·ªëng k√™ t√†i kho·∫£n
   */
  async getAccountStats(userId: string): Promise<UserSettingsResult> {
    try {
      // L·∫•y th√¥ng tin user progress
      const { data: progress, error: progressError } = await supabase
        .from('user_progress')
        .select('*')
        .eq('user_id', userId)
        .single()

      if (progressError) {
        return {
          success: false,
          error: 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ t√†i kho·∫£n'
        }
      }

      // L·∫•y s·ªë l∆∞·ª£ng b√†i thi ƒë√£ l√†m
      const { count: examCount, error: examError } = await supabase
        .from('exam_results')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', userId)

      if (examError) {
        console.warn('Could not load exam count:', examError)
      }

      return {
        success: true,
        data: {
          progress,
          examCount: examCount || 0
        }
      }
    } catch (error) {
      console.error('Get account stats error:', error)
      return {
        success: false,
        error: 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i th·ªëng k√™'
      }
    }
  }
}

// Export singleton instance
export const userSettingsService = new UserSettingsService()
